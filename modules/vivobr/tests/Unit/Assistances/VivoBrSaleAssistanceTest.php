<?php

namespace VivoBR\Tests\Unit\Assistances;

use GuzzleHttp\Psr7\Response;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Auth;
use Mockery;
use TradeAppOne\Domain\Enumerators\NetworkEnum;
use TradeAppOne\Domain\HttpClients\Restful\RestResponse;
use TradeAppOne\Domain\Repositories\Collections\SaleRepository;
use TradeAppOne\Tests\Helpers\Builders\UserBuilder;
use TradeAppOne\Tests\TestCase;
use VivoBR\Connection\SunConnection;
use VivoBR\Services\VivoBrSaleAssistance;

class VivoBrSaleAssistanceTest extends TestCase
{
    protected $user;
    /** @test */
    public function should_return_an_instance()
    {
        $class = new VivoBrSaleAssistance(resolve(SunConnection::class), resolve(SaleRepository::class));

        $className = get_class($class);

        $this->assertEquals(VivoBrSaleAssistance::class, $className);
    }

    /** @test */
    public function should_get_products_by_filters_return_collection()
    {
        $class = new VivoBrSaleAssistance(resolve(SunConnection::class), resolve(SaleRepository::class));
        Auth::setUser($this->user);
        $return = $class->getProductsByFilters(NetworkEnum::CEA, []);

        $this->assertEquals(Collection::class, get_class($return));
    }

    /** @test */
    public function should_get_products_by_filters_return_empty_when_not_exists_plans()
    {
        $mock = Mockery::mock(SunConnection::class)->makePartial();
        Auth::setUser($this->user);
        $response     = new Response(200, ['ContentÂ­Type' => 'application/json'], "{}");
        $restResponse = RestResponse::success($response);

        $mock->shouldReceive('selectCustomConnection')->andReturn($mock);
        $mock->shouldReceive('listPlans')->andReturn($restResponse);
        $class = new VivoBrSaleAssistance($mock, resolve(SaleRepository::class));

        $result = $class->getProductsByFilters(NetworkEnum::CEA, []);

        $this->assertEmpty($result);
    }

    /** @test */
    public function should_get_products_by_filters_list_plans_with_area_code()
    {
        $response     = new Response(200, ['ContentÂ­Type' => 'application/json'], "{}");
        $restResponse = RestResponse::success($response);
        Auth::setUser($this->user);

        $mock = Mockery::mock(SunConnection::class)->makePartial();
        $mock->shouldReceive('selectCustomConnection')->andReturn($mock);
        $mock->shouldReceive('listPlans')->with(['ddd' => '11'])->andReturn($restResponse);

        $class = new VivoBrSaleAssistance($mock, resolve(SaleRepository::class));
        $class->getProductsByFilters(NetworkEnum::CEA, ['areaCode' => 11]);
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = (new UserBuilder())->build();
    }
}
